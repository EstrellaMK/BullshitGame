

/*
    CLASE CONFIGPLAYER
    - Esta clase permitirá añadir jugadores a la partida (Humano o computadora)
    - Siempre habrá un jugador humano
    -
 */

package bsgame;

import java.awt.Font;
import java.awt.Toolkit;
import java.util.ArrayList;
import javax.swing.JLabel;
import javax.swing.JOptionPane;


public class configPlayer extends javax.swing.JFrame {
    
    public ArrayList<String> playerIds; //Contiene lso nombres de los jugadores
    public int P[][] = new int[3][2]; // Contiene el nivel de la máquina [posicion][nivel]
    int cantCPU = 0; //Registrará la cantidad de jugadores máquinas
  
    public configPlayer() {
        initComponents();
        this.setTitle("Bullshit Game: Configuración de Jugadores");
        setIconImage(Toolkit.getDefaultToolkit().getImage((getClass().getResource("/bsgame/img2/iconGame.png"))));
        this.setLocationRelativeTo(null);
        playerIds=new ArrayList<>();
    }
    

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        addAI = new javax.swing.JButton();
        doneButton = new javax.swing.JButton();
        pidTextBox = new javax.swing.JTextField();
        titleText = new javax.swing.JLabel();
        AddCPU = new javax.swing.JLabel();
        playerName = new javax.swing.JLabel();
        P1 = new javax.swing.JLabel();
        pidOneLabel = new javax.swing.JLabel();
        P2 = new javax.swing.JLabel();
        pidTwoLabel = new javax.swing.JLabel();
        P3 = new javax.swing.JLabel();
        pidThreeLabel = new javax.swing.JLabel();
        P4 = new javax.swing.JLabel();
        pidFourLabel = new javax.swing.JLabel();
        comboLVL = new javax.swing.JComboBox<>();
        volverBtn = new javax.swing.JButton();
        bgLabel = new javax.swing.JLabel();

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(52, 58, 64));
        jPanel1.setForeground(new java.awt.Color(165, 166, 246));
        jPanel1.setMaximumSize(new java.awt.Dimension(1151, 581));
        jPanel1.setPreferredSize(new java.awt.Dimension(1151, 581));
        jPanel1.setLayout(null);

        saveButton.setBackground(new java.awt.Color(165, 166, 246));
        saveButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        saveButton.setForeground(new java.awt.Color(0, 0, 0));
        saveButton.setText("Guardar");
        saveButton.setBorder(null);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        jPanel1.add(saveButton);
        saveButton.setBounds(880, 180, 150, 40);

        addAI.setBackground(new java.awt.Color(165, 166, 246));
        addAI.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        addAI.setForeground(new java.awt.Color(0, 0, 0));
        addAI.setText("Añadir");
        addAI.setBorder(null);
        addAI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAIActionPerformed(evt);
            }
        });
        jPanel1.add(addAI);
        addAI.setBounds(880, 320, 150, 40);

        doneButton.setBackground(new java.awt.Color(165, 166, 246));
        doneButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        doneButton.setForeground(new java.awt.Color(0, 0, 0));
        doneButton.setText("LISTO");
        doneButton.setBorder(null);
        doneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneButtonActionPerformed(evt);
            }
        });
        jPanel1.add(doneButton);
        doneButton.setBounds(450, 500, 230, 50);

        pidTextBox.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jPanel1.add(pidTextBox);
        pidTextBox.setBounds(590, 180, 240, 40);

        titleText.setBackground(new java.awt.Color(255, 193, 7));
        titleText.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 36)); // NOI18N
        titleText.setForeground(new java.awt.Color(255, 193, 7));
        titleText.setText("JUGADORES:");
        jPanel1.add(titleText);
        titleText.setBounds(60, 30, 512, 48);

        AddCPU.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        AddCPU.setForeground(new java.awt.Color(255, 193, 7));
        AddCPU.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        AddCPU.setText("Agregar Máquina");
        AddCPU.setToolTipText("");
        AddCPU.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jPanel1.add(AddCPU);
        AddCPU.setBounds(590, 280, 193, 25);

        playerName.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        playerName.setForeground(new java.awt.Color(255, 193, 7));
        playerName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        playerName.setText("Nombre del jugador");
        jPanel1.add(playerName);
        playerName.setBounds(590, 130, 193, 25);

        P1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        P1.setForeground(new java.awt.Color(93, 95, 239));
        P1.setText("P1");
        jPanel1.add(P1);
        P1.setBounds(100, 120, 30, 34);

        pidOneLabel.setBackground(new java.awt.Color(153, 153, 153));
        pidOneLabel.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 24)); // NOI18N
        pidOneLabel.setForeground(new java.awt.Color(255, 255, 255));
        pidOneLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pidOneLabel.setBorder(new javax.swing.border.MatteBorder(null));
        jPanel1.add(pidOneLabel);
        pidOneLabel.setBounds(190, 120, 222, 45);

        P2.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        P2.setForeground(new java.awt.Color(93, 95, 239));
        P2.setText("P2");
        jPanel1.add(P2);
        P2.setBounds(100, 200, 30, 34);

        pidTwoLabel.setBackground(new java.awt.Color(102, 102, 102));
        pidTwoLabel.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 24)); // NOI18N
        pidTwoLabel.setForeground(new java.awt.Color(255, 255, 255));
        pidTwoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pidTwoLabel.setBorder(new javax.swing.border.MatteBorder(null));
        jPanel1.add(pidTwoLabel);
        pidTwoLabel.setBounds(190, 200, 222, 45);

        P3.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        P3.setForeground(new java.awt.Color(93, 95, 239));
        P3.setText("P3");
        jPanel1.add(P3);
        P3.setBounds(100, 280, 30, 34);

        pidThreeLabel.setBackground(new java.awt.Color(102, 102, 102));
        pidThreeLabel.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 24)); // NOI18N
        pidThreeLabel.setForeground(new java.awt.Color(255, 255, 255));
        pidThreeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pidThreeLabel.setBorder(new javax.swing.border.MatteBorder(null));
        jPanel1.add(pidThreeLabel);
        pidThreeLabel.setBounds(190, 280, 222, 45);

        P4.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        P4.setForeground(new java.awt.Color(93, 95, 239));
        P4.setText("P4");
        jPanel1.add(P4);
        P4.setBounds(100, 360, 30, 34);

        pidFourLabel.setBackground(new java.awt.Color(102, 102, 102));
        pidFourLabel.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 24)); // NOI18N
        pidFourLabel.setForeground(new java.awt.Color(255, 255, 255));
        pidFourLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pidFourLabel.setBorder(new javax.swing.border.MatteBorder(null));
        jPanel1.add(pidFourLabel);
        pidFourLabel.setBounds(190, 360, 222, 45);

        comboLVL.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nivel 1", "Nivel 2", "Nivel 3" }));
        jPanel1.add(comboLVL);
        comboLVL.setBounds(590, 320, 240, 37);

        volverBtn.setBackground(new java.awt.Color(165, 166, 246));
        volverBtn.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });
        jPanel1.add(volverBtn);
        volverBtn.setBounds(1058, 10, 80, 30);

        bgLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bsgame/img2/bg2.png"))); // NOI18N
        jPanel1.add(bgLabel);
        bgLabel.setBounds(120, 170, 890, 420);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1151, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    /*
        OBTENER EL NOMBRE DEL JUGADOR
    
    private String[] getPids(){
        String[] pids = playerIds.toArray(new String[playerIds.size()]);
        return pids;
    }
    */
    
    
    /*
        AÑADIR JUGADOR
        - Parámetro i: Indica si el jugador a ingresar es humano(1) o máquina(2)
        - Límite de jugadores: 4
    */
    private void addPlayer(int i)
    {
        
        if(playerIds.size() == 4){
            JLabel message = new JLabel("Solo puede haber entre 2 a 4 jugadores");
            message.setFont(new Font("Arial",Font.BOLD,20));
            JOptionPane.showMessageDialog(null,message);
            //Para limpiar el label
            pidTextBox.setText(""); 
        
        }else{
            
            switch (i){
                
                //JUGADOR HUMANO
                case 1:
                    
                    //Si el label del huma está vació, el sistem pedirá el ingreso 
                    if(pidTextBox.getText().isEmpty()){
                        
                        JLabel message = new JLabel("Complete su nombre");
                        message.setFont(new Font("Arial",Font.BOLD,20));
                        JOptionPane.showMessageDialog(null,message);
                      
                    }else{
                        /*
                            Si no se encuentra vacío, guardará, sin espacios, el nombre del jugador
                            y lo añadirá al arrayList playerIds
                        */
                        String name = pidTextBox.getText().trim();
                        playerIds.add(name);
                        
                    }
                    
                    break;
                    
                case 2:
                    /*
                        JUGADOR MÁQUINA
                        - Se guardará la posición en la que se encuentra la máquina con respecto a la cantidad de jugadores total
                        - Se obtendrá el nivel de la máquina registrada mediante el comboBox (0 -> nivel 1, 1 -> nivel 2, 2 -> nivel 3)
                        - Se guardará en el arraList playerIds
                        - Se aumenta el contador de CPU (cantCPU) -> Sirve para sabe que número de máquina es
                    */
                    
                    P[cantCPU][0] = playerIds.size();
                    P[cantCPU][1] = comboLVL.getSelectedIndex();
                    playerIds.add("CPU "+(cantCPU+1)+" lvl."+P[cantCPU][1]);
                    cantCPU++;
                        
                    break;
        }
        
            // Las siguientes condiciones sirven para mostrar los nombre en la interfaz
            if(playerIds.size()==1){
                pidOneLabel.setText(playerIds.get(0));
            }
            else if (playerIds.size()==2){
                pidOneLabel.setText(playerIds.get(0));
                pidTwoLabel.setText(playerIds.get(1));
            }else if (playerIds.size()==3){
                pidOneLabel.setText(playerIds.get(0));
                pidTwoLabel.setText(playerIds.get(1));
                pidThreeLabel.setText(playerIds.get(2));
            }else if (playerIds.size()==4){
                pidOneLabel.setText(playerIds.get(0));
                pidTwoLabel.setText(playerIds.get(1));
                pidThreeLabel.setText(playerIds.get(2));
                pidFourLabel.setText(playerIds.get(3));
            }
        
            if(playerIds.size()>0){
                JLabel message = new JLabel("Guardado Exitosamente");
                message.setFont(new Font("Arial",Font.BOLD,48));
                JOptionPane.showMessageDialog(null,message);
                //Para limpiar el label
                pidTextBox.setText("");   
            }
            
        }

    }
    

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        //Se añade el JUGADOR HUMANO
        addPlayer(1);
    }//GEN-LAST:event_saveButtonActionPerformed

    private void doneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneButtonActionPerformed
        //Verifica si existen al menos 2 jugadores
        if(playerIds.size()==1 || playerIds.size()==0){
                JLabel message = new JLabel("Debe de haber al menos 2 a 4 jugadores");
                message.setFont(new Font("Arial",Font.BOLD,48));
                JOptionPane.showMessageDialog(null,message);
                //Para limpiar el label
                pidTextBox.setText(""); 
        }else{
            //Da inicio a la partida, enviando el arrayList de jugadores y los niveles registrados de la máquina
            new GameStage(playerIds,P).setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_doneButtonActionPerformed

    private void addAIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAIActionPerformed
        //Se añade el JUGADOR MÁQUINA
        addPlayer(2);
    }//GEN-LAST:event_addAIActionPerformed

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        new Menu().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_volverBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(configPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(configPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(configPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(configPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new configPlayer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AddCPU;
    private javax.swing.JLabel P1;
    private javax.swing.JLabel P2;
    private javax.swing.JLabel P3;
    private javax.swing.JLabel P4;
    private javax.swing.JButton addAI;
    private javax.swing.JLabel bgLabel;
    private javax.swing.JComboBox<String> comboLVL;
    private javax.swing.JButton doneButton;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel pidFourLabel;
    private javax.swing.JLabel pidOneLabel;
    private javax.swing.JTextField pidTextBox;
    private javax.swing.JLabel pidThreeLabel;
    private javax.swing.JLabel pidTwoLabel;
    private javax.swing.JLabel playerName;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel titleText;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables
}
